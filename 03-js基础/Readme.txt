第一天JS学习：
JS开始学习：
JAVAScript简单入门：
   JAVAScript是一门运行在浏览器端的脚本语言。它是一门真正的编程语言，要遵循一定的规则。
   JAVAScript包含几个部分： ECMAScript：是JS语言的一个标准，是欧洲计算机制造协会指定的一套规范;
                           DOM:Document Object Model  文档对象模型，是JS访问页面内容的接口;
                           BOM:Brower Object Model    浏览器对象模型，是JS访问浏览器的接口。
   JAVAScript引入方式：行内：就是在行内标签中，作为元素属性来学  <h1 onclick="alert("hello bts")"></h1>
                      内部：通过script标签引入   <script>alert("hello huashan")</script>
                        注意点：script标签可以放在页面中任何位置，但是一般放在body后面HTML前面，JS代码是在script标签中书写的
                      外部：首先在外面建一个js文件（out.js），然后在HTML页面中通过script标签来引入外部js   <script src="./out.js"></script>
                        注意点：在引用外部js时，script标签中的js代码是不会执行的；
                                Script标签可以引入多次，也就是说，在一个html中，可以有多个script标签。
                                最佳实践：使用外部引入js文件时，位置放在底部。
  JS的运行环境：浏览器，node，手机移动端，嵌入式，ai,区块链
  JAVAScript词法结构（规则）：
            字符集：unicode
            区分大小写（要不然会出错）  HTML是不存在大小写区分问题的
            忽略空白字符：（空格，制表符和换行符）  CSS也是忽略空白字符的
            注释：就是说JS代码中进行注释时存在单行注释//和多行注释/* */(不允许嵌套使用)
            标识符：在编写js的过程中，定义的大量变量和函数，这些变量和函数的名称就是标识符
            关键字（保留字）：就是说JS中自己定义的，比如for if var都不可用作变量，标签或者说函数名。最佳实践：标识符（变量、函数）命名时采用小驼峰式命名法。
----------------------------------------------------------------------------------------------------------------------------------------------------------
变量学习：
  1，进程：当一个项目运行起来后，就是一个进程（工厂）；进程是操作系统分配和调度资源（CPU和内存）的基本单位
     线程：真正干活的是线程，JS是单线程的（只有一个工人），在默认情况下，工人是由上到下来执行任务。
     JS是单线程的，是指它的主线程是单线程。但如果主线程遇到一个非常耗时间的任务，它是可以找别的线程来帮忙，别的线程将这个活干完后，需要把结果给主线程。这样JS仍然是单线程的
              非常耗时间的任务有：网络请求数据    读取文件操作.....
  2，变量是为了存储数据（保存到内存），相当于给内存地址取了个别名，这个别名就是变量名
     变量=变量名+变量值
  3，声明变量：
       一次声明一个变量  var name=zhangsan;var age=23
       一次声明多个变量  var a = 10,b = 11,c=12；指的是使用一个var
       重复声明   var  p=12;
                  var  p=13;前面的值会被后面的值覆盖掉。
       遗漏声明   p = 10 就是在声明时缺少var
   声明变量与定义变量在于是否给变量赋了变量值，定义变量一定会有变量值
  4，全局变量与局部变量（普通话与方言）：
     分界点：在于函数
     全局变量在函数内外都可以访问
     局部变量只在函数内部可以访问，函数外部不能访问
  5，数据类型：针对不同的数据类型，分配不同的内存空间-->为了合理利用内存空间
     两大类：
       基本数据类型（存储在栈区）：number（数值）；string（字符串）；boolean（布尔）；undefined；null
       引用数据类型（存储在堆区）：object（对象）（array，function）
     两大数据类型存储方式：基本数据类型（存储在栈区）：举例var b = a; 指的是把a中栈区中的数据取出来一份，给了b，a和b是独立。
                          引用数据类型（存储在堆区）。
   6，JS代码的解析与执行：
     （1）代码块：
         独立性：当一个代码发生错误，其它代码段不受影响
         共享性：代码块可以有多个，上面的代码块不能使用下面的代码块中的数据，下面代码块可以使用；要注意声明与调用的顺序。
     （2）预编译：在JS代码真正执行之前有一个预编译的过程。
          提升：
            提升变量：提升的话是要提升到代码块的最前面；函数中的var变量提升到函数内部的最前面
                var变量可以提升，没有var的变量是不会提升的；
                循环变量也可以提升；
                函数内部加var的变量也会提升，提升到函数内部的最前面。
            提升函数：提升到的是提升代码块的最前面
               函数声明也会提升，提升到代码块的最前面；
               函数表达式不会提升，原因是函数表达式本质上是个变量。
   7，ES6中定义变量，使用let&const
      （1）let:与var相类似，用来定义变量
           与var的区别：
            。块级作用域（第三种作用域），let所声明的变量，只在let命令所在的代码块有效。
              在使用var的时代，只有全局作用域和局部作用域，在ES6中提出let关键，可以声明一个块级作用域；
            。let没有，不存在“变量提升”现象；
            。不会成为window对象的属性；
            。暂时性死区（TDZ）：在代码块内，使用let命令声明变量之前，该变量都是不可用的否则会报错；
            。不能重复定义。
       （2）const:用来声明常量，其值不可改变
            。定义完后，不能修改值(基本数据类型，也可能是地址)
            。不能重复声明
            。没有提升
            。声明时必须赋值，必须立即初始化
   8，语句：
      循环语句
        for循环：
        一些运算规则的感觉：
           （1）i++中表示 i的值肯定要加1  i++整体是一个旧值（或者这样说，i++要先赋值再+1） 
           （2）++i中表示  i的值肯定要加1  ++i整体是一个新值（或者说 ++i要先加1再赋值）
           （3）i = j = k = m = 10;
            解释：=是赋值运算符，具有右结合的性质将10赋给了m；10赋给了m  m=10整体也有一个值，是左值（因为已经赋了值所以为10）；
            =运算符有副作用 整体也有一个值++，--，运算符也有副作用，整体也有一个值。加号 + 具有拼接的作用

           for循环 参数1：循环变量  参数2：条件  参数3：改变循环变量
           for(let i=0;i<=10; i++){
           console.log(i)
         }
  案例：计算0~100的和；在操场跑10圈的距离；99乘法表；百钱买百鸡；冒泡排序。
       冒泡排序：

        while循环 
        do...while循环
      条件语句
------------------------------------------------------------------------------------------------------------------------------
  第二天：
  案例：选择排序：假定第一个元素是最小元素，从第二个元素
  函数作用就是封装功能块
  1，函数含义：
    数学中的函数本质就是一个规则（封装成功能块），如果给这个功能块输入一些东西，那么就会输出一些东西
    JS中的函数肯定会给我们输出一些东西，但是我们可以不输入东西。
    可以说函数作用是封装功能块，在JS内部有很多内置函数，我们可以直接使用，我们也可以自定义函数，比如：alert()
  2，函数定义：
  （1）函数声明  使用function  f(){}来声明函数  其中f是函数名；()是函数的特殊标志；{}是函数体
  （2）函数表达式  本质上是一个变量，通过变量引用当前function更便于后面调用；
                  将function整体作为表达式放在赋值运算符的右边，函数名称可以加上，但只对函数内部起作用。
  小知识点：命名法：
            小驼峰命名：toString
            大驼峰命名：Tostring
            下划线命名：to_string
  3，函数调用：如果定义好一个函数，并不会自动执行，需要调用它，它才会执行函数体中的代码，如果没有调用，相当于函数没写
     函数调用很简单：函数名（参数），核心就是小括号
  4，函数参数：
    形参：函数定义时，()中写的参数，叫形参。对于形参是不存在数据类型（数值，字符串，布尔型）的要求的，不能够在定义好的函数体外使用，相当于函数内部的局部变量，作用是用来接收实参的
    实参：函数调用时，()中写的参数，叫实参。作用是给函数传递真实数据，传递过去形参接收了。
  5，函数返回值：通过return返回，返回到函数调用处。在函数体内，return后面的语句就不会在执行啦。return也叫作跳转语句。
     函数返回多个值:默认情况下，Js函数只能返回一个值。如果你想返回多个值的话，那么你可以使用容器比如说：数组，引用对象。
  6，作用域：在JS中，作用域分三类：
            全局作用域，局部作用域，块级作用域（let，只有有{}才会出现块级作用域），函数内部会形成一个局部作用域（函数作用域）
            局部作用域内（在函数中），可以访问全局的变量；在全局访问内（在函数外部），是不能访问局部作用域中的变量（函数内部定义的变量）
  7，参数的传递：
    基本数据类型的数据（值传递）：就是把栈区的数据copy一份给了形参，形参和实参是相互独立的内存空间，改变形参，实参并不会出现影响。
    引用数据类型的数据（引用传递）：就是把栈区的地址copy一份给了形参，形参和实参同时指向堆区的同一个内存空间，通过形参改变堆区内存空间的数据，实参这个地址对应的数据也会发生变化
    函数可以作为另一个函数的参数：一个函数可以作为另一个函数的参数，这个函数可以是函数声明，也可以是函数表达式
  8，arguments的特点:
      函数调用的过程就是实参向形参赋值的过程，实参会复制一份给形参。除了复制一份给形参外，它会给arguments一份。
      arguments中收集了实参，arguments只是函数内部的属性（类数组）， 在函数外面是不能访问的。
  9，arguments和形参的关系：
          当形参改变了，那么arguments里面的数据也会改变
          当改变了arguments里面的数据，形参也会发生改变
      什么时候使用形参，什么时候使用arguments？
          1，当实参非常多时，写一堆的形参来接收，不方便，此时你就可以使用arguments
          2，当实参有特殊含义时，需要有一个特殊的标识，就可以使用形参来标识
  10，JS有两个容器：
      数组：[1,2,3,"hello",true]   获取某个元素，使用索引
      对象：{name:"wangcai",age:100}  name和age叫key   wangcai和100叫value
简要总结： 
        1，函数的作用：封装成功能块，用的时候直接调用
        2，函数定义：函数声明   函数表达式
        3，函数调用：函数定义完后，没有调用，相当于没有写
                    函数调用的过程就是实参向形参赋值的过程。
        4，函数的返回值：return 如果没有写返回值，默认返回undefined
        5，函数的参数：形参（函数定义时()里面的参数）和实参 (函数调用时()里面的参数)
        6，值传递，引用传递
        7，函数可以作为另一个函数的参数  setTimeout(function(){},3000)
        8，arguments  收集实参 
        9，返回要想返回多个值，你需要返回一个容器（数组，对象）
--------------------------------------------------------------------------------------------------------------------------------
复习上节课函数内容：
    1，定义函数    function f(){}     var g = function(){}
    2，函数参数    形参和实参
    3，函数调用    f()   函数调用的过程就是实参向形参赋值的过程
    4，函数返回值  return   
    5，值传递和引用传递  画图
    6，arguments 收集实参 
    7，函数要返回多个值，可以把多个值放到一个容器中，数组  对象 

  1，ES6中对函数的扩展 
    参数的默认值：
        1，参数默认值  当我们没有给形参传值时，使用默认值，如果给形参传值，使用我们传递的值。
        2，传递赋值时，实参的第1个会赋给形参的第1个，依次向后..
        3，如果实参个数多于形参个数，后面的实参忽略了。
        4，如果形参个数多于实参个数，后面的形参的值是undefined。

    扩展运算符：
        ... 

    rest参数：...rest 在函数定义时的形参的位置写的...
        代替arguments
        定义函数时…

    箭头函数:
        function f(){}     var g = function(){}
        特点1：只有一个形参时，()可不写
        特点2：只有一个带return语句   {} 和 return 都可以不写
        特点3：只有一个不带return语句  {} 可以不写
        特点4：如果返回对象，把{} 和 return 省掉的话，需要给这个对象加()

        在箭头函数中没有argumetns，可以使用rest参数 
        在箭头函数中没有this

  2，执行上下文 
    1.理解执行上下文：
      （1）每个代码在调用时，都会产生一个执行上下文；
      （2）这里的代码可以分成两类：函数代码（函数内部的代码）；全局代码（打开页面就会执行的代码）
    2.全局代码和函数代码：
        函数代码：在函数里面的代码叫函数代码（或者局部代码）。
        全局代码：页面跑起来，默认进入的就是全局代码 
    3.全局执行上下文，函数执行上下文：
        当执行全局代码时，产生一个全局执行上下文；全局执行上下文只有一个。
        当执行函数代码时，产生一个函数执行上下文。而每调用一次函数，都会产生一个函数的执行上下文件。函数执行上下文可以有N个。

    4.执行上下文栈：（只需要知道栈都是“先进后出”，在执行函数时，先是全局变量，生成的全局执行上下文在底部，
                随着函数代码执行会生成函数执行上下文在全局的顶部，当最终代码执行完后再弹出栈）
          全局执行上下文位于栈底，当调用一个函数，就产生一个局部的执行上下文，这个局部的执行上下文要压栈，当这个函数执行完，这个执行上下文就要出栈。
    5.执行上下文的作用：给全局代码或局部代码提供数据。数据包含变量和函数。
    父级函数：可以说是本身函数的上一级函数，比如对于定义的全局变量（函数）一样，其对应的父级函数指的是全局代码

    6.全局执行上下文中组成如下：
        1，全局地变量和函数 
      局部执行上下文中组成如下：
        1，本函数内部的变量，arguments，内部定义的函数
        2，父级函数的执行上下文
    7.在函数中使用变量的值，如何确定？
      执行上下文中保存数据有两部分组成：1是自己定义的变量，2是父级函数的执行上下文
      对于全局代码来说，就只有第一部分，自己定义的变量也就是全局变量
      确定方法：首先在自己定义的变量中找，找不到的话就去父级函数的执行上下文去找，如果找不到变量就报错。

    8. 为什么函数内部的变量，在函数的外部无法访问，从执行上下文的角度来分析：
    因为定义在函数内部的变量都是局部变量，不是全局变量；而在函数外部访问的代码是全局代码，必须去全局执行上下文中寻找变量，而全局变量中并没有，所以无法访问

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
案例：插入排序：没有交换位置的逻辑  for()循环（循环次数确定的情况下）while()循环适用于循环次数不知道的情况
函数复习：
新学知识点：
  1，作用域链:作用域链是一种数据查找机制，与执行上下文有关。
  2，把一个函数定义到另一个函数内部原因：某些函数不想被别人直接访问，就可以把它定义到另一个函数内部，达到封装效果
  3，函数可以作为返回值：函数在js中也是一种数据类型，引用数据类型。引用数据类型有三种：数组[]；引用对象{}；函数function{}
  4，立即执行函数表达式IIFE：不需要我们手动调用就可以执行的函数。在书写时最好在后面加上；
                          实现：()把整体包起来  ()把函数声明包起来   + - * / !(我在操作时*和/是不可以的)
  5，闭包（closure）：如果在一个函数中嵌套一个函数，并且里面函数引用外面函数变量
          当一个函数调用完毕后，会释放内存空间；它里面的变量所占的空间被释放。
      闭包可以延长变量的生命周期；可以产生内存泄漏
  6，构造器本质上是函数，一般把首字母大写，其作用：创建对象，用new来创建，只要是new定义的，类型就是对象
      js中内置了很多构造器：如Number(),String(),Boolean(),Function(),Array(),Object()
    在JS中，一切皆对象：（基本数据类型，引用数据类型）
  7，数组中常用的方法：
        push 添加一个元素  添加到数组最后面 
        unshift  添加一个元素  添加到数组最前面
        pop 删除一个元素  删除最后面的元素
        shift  删除一个元素   删除最前面的元素
        join  将数组中的某个符号连接起来，形成字符串
        reverse  将数组中的元素反转
        concat  将多个数组连接成一个数组
        sort 将数组中的元素排序（从小到大）
        slice  切割数组
        toString  把数值组转换成字符串



























































    --------------------------------------------------------------------------------------------------------------------------













































